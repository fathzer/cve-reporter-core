package com.fathzer.cvereporter.common;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.attribute.FileAttribute;
import java.nio.file.attribute.PosixFilePermission;
import java.nio.file.attribute.PosixFilePermissions;
import java.util.Set;

import org.apache.commons.lang3.SystemUtils;

import lombok.experimental.UtilityClass;
import lombok.extern.slf4j.Slf4j;

@UtilityClass
@Slf4j
public class SafeTmpFiles {
	public static File createFile(String prefix, String suffix) throws IOException {
		final File f;
		if (SystemUtils.IS_OS_UNIX) {
			FileAttribute<Set<PosixFilePermission>> attr = PosixFilePermissions.asFileAttribute(PosixFilePermissions.fromString("rwx------"));
			f = Files.createTempFile("prefix", "suffix", attr).toFile();
		} else {
			f = Files.createTempFile("prefix", "suffix").toFile();
			boolean success = f.setReadable(true, true) & f.setWritable(true, true) & f.setExecutable(true, true);
			if (!success) {
				log.debug("Unable to protect the file " + f);
			}
		}
		f.deleteOnExit();
		return f;
	}

	private static void deleteDirectory(File directory) throws IOException {
		if (!directory.exists()) {
			return;
		}
		cleanDirectory(directory);
		Files.delete(directory.toPath());
	}

	/**
	 * Cleans a directory without deleting it.
	 * 
	 * @param directory directory to clean
	 * @throws IOException in case cleaning is unsuccessful
	 */
	public static void cleanDirectory(File directory) throws IOException {
		final File[] files = directory.listFiles();
		if (files == null) {
			// null if security restricted
			throw new IOException("Failed to list contents of " + directory);
		}
		for (File file : files) {
			forceDelete(file);
		}
	}
	
    /**
     * Delete a file if it exists. If file is a directory, delete it and all sub-directories.
     * <p>
     * The difference between File.delete() and this method are:
     * <ul>
     * <li>A directory to be deleted does not have to be empty.</li>
     * <li>You get exceptions when a file or directory cannot be deleted.
     *      (java.io.File methods returns a boolean)</li>
     * </ul>
     *
     * @param file  file or directory to delete, must not be <code>null</code>
     * @throws NullPointerException if the directory is <code>null</code>
     * @throws IOException in case deletion is unsuccessful
     */
    public static void forceDelete(File file) throws IOException {
    	if (!file.exists()) {
    		// File does not exist ... nothing to do
    	} else if (file.isDirectory()) {
            deleteDirectory(file);
        } else {
            Files.delete(file.toPath());
        }
    }
}
