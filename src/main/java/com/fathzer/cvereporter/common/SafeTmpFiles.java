package com.fathzer.cvereporter.common;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.nio.file.attribute.FileAttribute;
import java.nio.file.attribute.PosixFilePermission;
import java.nio.file.attribute.PosixFilePermissions;
import java.util.Set;

import org.apache.commons.lang3.SystemUtils;

import lombok.experimental.UtilityClass;
import lombok.extern.slf4j.Slf4j;

@UtilityClass
@Slf4j
/** Some temporary files/directories utilities.
 */
public class SafeTmpFiles {
	private static final FileAttribute<Set<PosixFilePermission>> SAFE_FILE_PERMISSIONS = PosixFilePermissions.asFileAttribute(PosixFilePermissions.fromString("rwx------"));
	
	/** Creates a new temporary file.
	 * @param prefix The prefix of the file's name
	 * @param suffix The suffix of the file's name
	 * @return A temporary file, only accessible to the user that created the file, and that will be deleted when program will shutdown (exception if it is killed by something like kill -9 command).
	 * @throws IOException if something went wrong
	 */
	public static File createTempFile(String prefix, String suffix) throws IOException {
		final File f;
		if (SystemUtils.IS_OS_UNIX) {
			f = Files.createTempFile(prefix, suffix, SAFE_FILE_PERMISSIONS).toFile();
		} else {
			f = Files.createTempFile(prefix, suffix).toFile();
			makeSecured(f);
		}
		f.deleteOnExit();
		return f;
	}

	private static boolean makeSecured(final File f) {
		// Contrary to what Sonar claims, using the & operator here is not an error.
		boolean success = f.setReadable(true, true) & f.setWritable(true, true) & f.setExecutable(true, true);
		if (!success) {
			log.debug("Unable to protect the file " + f);
		}
		return success;
	}
	
	/** Creates a new temporary directory.
	 * @param prefix The prefix of the file's name
	 * @return A temporary directory, only accessible to the user that created it, and that will be deleted when program will shutdown, even if the directory is not empty (exception if it is killed by something like kill -9 command).
	 * @throws IOException if something went wrong
	 */
	public static File createTempDirectory(String prefix) throws IOException {
		final File f; 
		if (SystemUtils.IS_OS_UNIX) {
			f = Files.createTempDirectory(prefix, SAFE_FILE_PERMISSIONS).toFile();
		} else {
			f = Files.createTempDirectory(prefix).toFile();
			makeSecured(f);
		}
		Runtime.getRuntime().addShutdownHook(new Thread(() -> {
			try {
				forceDelete(f);
			} catch (IOException e) {
				log.warn("Unable to delete directory {}", f);
			}
		}));
		return f;
	}

	private static void deleteDirectory(File directory) throws IOException {
		if (!directory.exists()) {
			return;
		}
		cleanDirectory(directory);
		Files.delete(directory.toPath());
	}

	/**
	 * Cleans a directory without deleting it (delete all files and directories it contains).
	 * @param directory directory to clean
	 * @throws IOException in case cleaning is unsuccessful or directory does not exists
	 */
	public static void cleanDirectory(File directory) throws IOException {
		if (!directory.exists()) {
			throw new NoSuchFileException(directory.toString());
		}
		final File[] files = directory.listFiles();
		if (files == null) {
			// null if security restricted
			throw new IOException("Failed to list contents of " + directory);
		}
		for (File file : files) {
			forceDelete(file);
		}
	}
	
    /**
     * Deletes a file if it exists. If file is a directory, delete it and all sub-directories.
     * <p>
     * The difference between File.delete() and this method are:
     * <ul>
     * <li>A directory to be deleted does not have to be empty.</li>
     * <li>You get exceptions when a file or directory cannot be deleted.
     *      (java.io.File methods returns a boolean)</li>
     * </ul>
     * @param file  file or directory to delete, must not be <code>null</code>
     * @throws NullPointerException if the directory is <code>null</code>
     * @throws IOException in case deletion is unsuccessful
     */
    public static void forceDelete(File file) throws IOException {
    	if (!file.exists()) {
    		// File does not exist ... nothing to do
    	} else if (file.isDirectory()) {
            deleteDirectory(file);
        } else {
            Files.delete(file.toPath());
        }
    }
}
