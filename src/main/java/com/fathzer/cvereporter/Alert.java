package com.fathzer.cvereporter;

import java.util.List;
import java.util.stream.Collectors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fathzer.cvereporter.common.Dependency;
import com.fathzer.cvereporter.cve.CVE;

import lombok.NonNull;

/** A security alert.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class Alert {
	private Dependency dependency;
	private List<CVE> causes;

	@JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
	public Alert(@JsonProperty("dependency") @NonNull Dependency dependency, @JsonProperty("causes") @NonNull List<CVE> causes) {
		this.dependency = dependency;
		if (causes.isEmpty()) {
			throw new IllegalArgumentException("Alert should have at least one cause");
		}
		this.causes = causes.stream().sorted((a,b)->(int)Math.signum(b.getScore()-a.getScore())).collect(Collectors.toList());
	}

	@JsonIgnore
	public double getMaxScore() {
		return causes.get(0).getScore();
	}

	@JsonIgnore
	public boolean hasUnknownScore() {
		return causes.get(causes.size()-1).getScore()<0.0;
	}

	public Dependency getDependency() {
		return dependency;
	}

	/** Gets the causes of this alert.
	 * @return A list of CVE sorted by scores in descending order
	 */
	public List<CVE> getCauses() {
		return causes;
	}

	@Override
	public String toString() {
		return dependency.toString()+": "+causes.stream().map(cve -> cve.getIdentifier()+" ("+cve.getScore()+")").collect(Collectors.toList()).toString();
	}
}
