package com.fathzer.cvereporter.builder;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.io.UncheckedIOException;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.TreeMap;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.apache.maven.model.Model;
import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
import org.codehaus.plexus.util.xml.pull.XmlPullParserException;

import com.fathzer.cvereporter.Project;
import com.fathzer.cvereporter.common.ArtifactId;
import com.fathzer.cvereporter.common.Dependency;
import com.fathzer.cvereporter.common.SafeTmpFiles;
import com.fathzer.cvereporter.repository.CodeRepository;

import lombok.AllArgsConstructor;
import lombok.Getter;

public class MavenEngine implements BuildEngine {
	private static final String POM_XML = "pom.xml";
	private static final String DEPENDENCY_FILE = "dependencies.txt";
	private static final String MAVEN_CMD;
	
	@AllArgsConstructor
	@Getter
	private static class PomConfig {
		BuildStatus status;
		Map<File,String> pathToPom;
	}
	
	private CodeRepository codeRepo;
	private File workingDir;
	
	static {
		MAVEN_CMD = System.getProperty("os.name").toLowerCase().startsWith("win") ? "mvn.cmd" : "mvn";
	}
	
	public MavenEngine(CodeRepository codeRepo) {
		this.codeRepo = codeRepo;
		try {
			this.workingDir = SafeTmpFiles.createTempDirectory("mvnEngineTmpDir");
		} catch (IOException e) {
			throw new UncheckedIOException(e);
		}
	}

	@Override
	public DependencySet getDependencies(Project project) throws IOException {
		final PomConfig config = getPoms(project);
		if (!BuildStatus.OK.equals(config.getStatus())) {
			return new DependencySet(config.getStatus(), null);
		}
		if (generate(config)!=0) {
			return new DependencySet(BuildStatus.BUILD_ERROR, null);
		}
		try (Stream<String> lines = Files.lines(new File(workingDir,DEPENDENCY_FILE).toPath())) {
			return new DependencySet(BuildStatus.OK, lines.map(this::toArtifact).filter(Optional::isPresent).map(Optional::get).collect(Collectors.toSet()));
		}
	}

	private PomConfig getPoms(Project project) throws IOException {
		try {
			final String pom = codeRepo.getFile(project, POM_XML);
			return getPoms(project, pom);
		} catch (FileNotFoundException e) {
			return new PomConfig(BuildStatus.NOT_THIS_BUILDER, null);
		}
	}
	
	private PomConfig getPoms(Project project, String pom) throws IOException {
		final Map<File,String> fileToPom = new TreeMap<>();
		try (Reader reader = new StringReader(pom)) {
			Model model = new MavenXpp3Reader().read(reader);
			List<String> modules = model.getModules();
			for (String module : modules) {
				final String path = module+"/"+POM_XML;
				fileToPom.put(new File(workingDir, path), codeRepo.getFile(project, path));
			}
		} catch (XmlPullParserException | IOException e) {
			return new PomConfig(BuildStatus.BUILD_ERROR,null);
		}
		fileToPom.put(new File(workingDir, POM_XML), pom);
		return new PomConfig(BuildStatus.OK, fileToPom);
	}
	
	private int generate(PomConfig config) throws IOException {
		for (Entry<File, String> pom : config.pathToPom.entrySet()) {
			pom.getKey().getParentFile().mkdirs();
			try (BufferedWriter writer= new BufferedWriter(new FileWriter(pom.getKey()))) {
				writer.write(pom.getValue());
			}
		}
		ProcessBuilder pb = new ProcessBuilder(Arrays.asList(MAVEN_CMD,"-q","-DoutputFile="+DEPENDENCY_FILE,"dependency:list"));
		pb.directory(workingDir);
		pb.redirectError(new File(workingDir,"errors.log"));
		pb.redirectOutput(new File(workingDir,"out.log"));
		Process p = pb.start();
		try {
			return p.waitFor();
		} catch (InterruptedException e) {
			Thread.currentThread().interrupt();
			return -1;
		}
	}
	
	private Optional<Dependency> toArtifact(String line) {
		if (!line.startsWith("   ") || "none".equals(line.trim())) {
			return Optional.empty();
		}
		String[] keys = line.split(":");
		return Optional.of(new Dependency(new ArtifactId(keys[0].trim(), keys[1].trim()), keys[3].trim()));
	}
}
