package com.fathzer.cvereporter.gitlab;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.UncheckedIOException;
import java.net.Proxy;
import java.net.URI;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.List;
import java.util.Map;
import java.util.function.Supplier;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fathzer.cvereporter.CodeRepository;
import com.fathzer.cvereporter.Project;
import com.fathzer.cvereporter.http.TinyHttpClient;
import com.fathzer.cvereporter.http.TinyHttpClient.FailureException;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@AllArgsConstructor
@Slf4j
public class GitLabRepository implements CodeRepository {
	private static final ObjectMapper MAPPER = new ObjectMapper();

	private String rootURI;
	private Proxy proxy;
	private String token;

	@Override
	public List<Project> getProjects(boolean owner, List<String> groups) throws IOException {
		int page = 0;
		List<Project> pageProjects;
		final List<Project> projects = new ArrayList<>();
		do {
			page++;
			pageProjects = getProjects(owner, page);
			if (groups.isEmpty()) {
				projects.addAll(pageProjects);
			} else {
				pageProjects.stream().filter(p -> p.belongsTo(groups)).forEach(projects::add);
			}
			log.trace("found "+projects.size());
		} while (!pageProjects.isEmpty());
		return projects;
	}

	private List<Project> getProjects(boolean owner, int page) throws IOException {
		if (page<=0) {
			throw new IllegalArgumentException("page should be positive");
		}
		final String url = String.format("%s/api/v4/projects?private_token=%s&owned=%b&per_page=100&page=%d",rootURI,token,owner,page);
		final Project[] projects = new TinyHttpClient().request(proxy, URI.create(url).toURL(), null, x->readValue(x,Project[].class), null);
		return Arrays.asList(projects);
	}
	
	private <T> T readValue(Supplier<InputStream> s, Class<T> aClass) {
		try (InputStream in = s.get()) {
			return MAPPER.readValue(in, aClass);
		} catch (IOException e) {
			throw new UncheckedIOException(e);
		}
	}
	
	@Override
	public String getFile(Project project, String path) throws IOException {
		final String url = String.format("%s/api/v4/projects/%s/repository/files/%s?private_token=%s&ref=master",rootURI,project.getId(),URLEncoder.encode(path, StandardCharsets.UTF_8.name()),token);
		try {
			final String base64Pom = (String) new TinyHttpClient().request(proxy, URI.create(url).toURL(), null, x->readValue(x,Map.class), null).get("content");
			return new String(Base64.getDecoder().decode(base64Pom));
		} catch (FailureException e) {
			if (e.getResponseCode()==404) {
				throw new FileNotFoundException(project.getPath()+"/"+path);
			} else {
				throw new IOException(e);
			}
		}
	}
}
