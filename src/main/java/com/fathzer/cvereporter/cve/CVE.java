package com.fathzer.cvereporter.cve;

import java.util.Collections;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fathzer.cvereporter.common.ArtifactId;
import com.fathzer.cvereporter.common.Dependency;
import com.fathzer.cvereporter.common.VersionRange;

/** A vulnerability.
 */
public class CVE {
	private final String identifier;
	private final ArtifactId id;
	private final VersionRange range;
	private final String description;
	private double score;
	private List<String> references;

	/** Constructor.
	 * @param id An artifactId
	 * @param range A version range
	 * @param description The CVE
	 * @deprecated Use {@link #CVE(String, ArtifactId, VersionRange, String)} instead
	 */
	@Deprecated
	public CVE(ArtifactId id, VersionRange range, String description) {
		this("unknown", id, range, description);
	}

	/** Constructor.
	 * @param identifier The vulnerability's identifier (something like CVE-2020-9488)
	 * @param id An artifactId
	 * @param range A version range
	 * @param description The CVE
	 */
	@JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
	public CVE(@JsonProperty("identifier") String identifier, @JsonProperty("artifact") ArtifactId id, @JsonProperty("range") VersionRange range, @JsonProperty("description")String description) {
		this.identifier = identifier;
		this.id = id;
		this.description = description;
		this.range = range;
		this.score = -1;
		this.references = Collections.emptyList();
	}

	/** Tests wheter this CVE concerns a dependency. 
	 * @param dependency The dependency to test
	 * @return true if this vulnerability concerns the dependency
	 */
	public boolean concerns(Dependency dependency) {
		return id.equals(dependency.getId()) && range.contains(dependency.getVersion());
	}

	/** Gets the artifact id of this CVE.
	 * @return an artifact id
	 */
	@JsonProperty("artifact")
	public ArtifactId getId() {
		return id;
	}

	/** Gets the description of this CVE.
	 * @return a String
	 */
	public String getDescription() {
		return description;
	}
	
	/** Gets the identifier of this vulnerability.
	 * @return The identifier of this vulnerability (usually something like CVE-2020-9488).
	 */
	public String getIdentifier() {
		return identifier;
	}

	/** Sets this vulnerability's score.
	 * <br>Default score is -1 (unknown score)
	 * @param score The new score
	 */
	public void setScore(double score) {
		this.score = score;
	}

	/** Gets this vulnerability's score.
	 * <br>Default score is -1 (unknown score), score usually are in the range 0.0 to 10.0. Higher is more dangerous.
	 * @return a double (-1 if unknown)
	 */
	public double getScore() {
		return score;
	}

	/** Sets the references of this CVE.
	 * @param references A list of references (usually some URL)
	 */
	public void setReferences(List<String> references) {
		this.references = references;
	}
	
	/** Gets the references of this CVE
	 * @return a List of String ((usually the string representation of URL).
	 */
	public List<String> getReferences() {
		return references;
	}
}
