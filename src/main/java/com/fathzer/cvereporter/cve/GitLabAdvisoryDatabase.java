package com.fathzer.cvereporter.cve;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.UncheckedIOException;
import java.net.URI;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import com.fathzer.cvereporter.common.ArtifactId;
import com.fathzer.cvereporter.common.Dependency;
import com.fathzer.cvereporter.common.VersionRange;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.ToString;
import us.springett.cvss.Cvss;
import us.springett.cvss.Score;

public class GitLabAdvisoryDatabase extends DataBase {
	private static final ObjectMapper MAPPER = new ObjectMapper(new YAMLFactory());
		
	@NoArgsConstructor
	@Getter
	@ToString
	@JsonIgnoreProperties(ignoreUnknown = true)
	private static class GitLabAdvisoryCVE {
		private String identifier;
		private String description;
		@JsonProperty("affected_range")
		private String range;
		private List<String> urls;
		@JsonProperty("cvss_v2")
		private String cvssV2;
		@JsonProperty("cvss_v3")
		private String cvssV3;

		@JsonIgnore
		private Score getScore() {
			final String cvss; 
			if (cvssV3!= null) {
				cvss = cvssV3;
			} else if (cvssV2!=null) {
				cvss = cvssV2;
			} else {
				return null;
			}
			return Cvss.fromVector(cvss).calculateScore();
		}
	}
	
	
	private final File f;
	
	public GitLabAdvisoryDatabase(File file) {
		this.f = file;
	}

	public GitLabAdvisoryDatabase(InputStream stream) throws IOException {
		this(toFile(stream));
	}
	
	private static File toFile(InputStream stream) throws IOException {
		final File result = File.createTempFile("GitLabAdvisoryDB", ".bin");
		Files.copy(stream, result.toPath(), StandardCopyOption.REPLACE_EXISTING);
		return result;
	}

	private List<CVE> getCves(ArtifactId id) {
		URI uri = URI.create("jar:"+f.toURI());
		try (FileSystem fs = FileSystems.newFileSystem(uri, Collections.emptyMap())) {
			final Path p = fs.getRootDirectories().iterator().next();
			final String pattern = String.format("maven/%s/%s/", id.getGroup(), id.getArtifact());
			try (Stream<Path> x = Files.find(p, Integer.MAX_VALUE,(filePath, fileAttr) -> filePath.toAbsolutePath().toString().contains(pattern) && Files.isRegularFile(filePath))) {
				return x.map(path -> GitLabAdvisoryDatabase.read(id, path)).collect(Collectors.toList());
			}
		} catch (IOException e) {
			throw new UncheckedIOException(e);
		}
	}
	
	private static CVE read(ArtifactId id, Path path) {
		try (InputStream stream = Files.newInputStream(path)) {
			final GitLabAdvisoryCVE readValue = MAPPER.readValue(stream, GitLabAdvisoryCVE.class);
			final CVE result = new CVE(readValue.getIdentifier(), id, new VersionRange(readValue.getRange()), readValue.getDescription());
			final Score score = readValue.getScore();
			if (score!=null) {
				result.setScore(score.getBaseScore());
			}
			if (readValue.getUrls()!=null) {
				result.setReferences(readValue.getUrls());
			}
			return result;
		} catch (IOException e) {
			throw new UncheckedIOException(e);
		}
	}
	
	@Override
	protected List<CVE> getCVEList(ArtifactId artifact) {
		final List<CVE> content = cves.computeIfAbsent(artifact, this::getCves);
		return content.isEmpty()?null:content;
	}

	public static void main(String[] args) throws IOException {
		File f = new File("C:\\Users\\a193041\\downloads\\advisories-community-main-6e6a2a1612cd648515bb6b790f5e2cabb95af204.zip");
		DataBase db = new GitLabAdvisoryDatabase(f);
		
		System.out.println(db.apply(Arrays.asList(
				new Dependency(new ArtifactId("org.apache.logging.log4j", "log4j-core"),"2.0.5"),
				new Dependency(new ArtifactId("com.fasterxml.jackson.core", "jackson-databind"),"2.9.5")
				)));
	}
}
