package com.fathzer.cvereporter.cve;

import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;

import com.fathzer.cvereporter.Alert;
import com.fathzer.cvereporter.DependencySet.ArtifactId;
import com.fathzer.cvereporter.common.Dependency;

public class DataBase implements Function<Collection<Dependency>, List<Alert>> {
	private final Map<ArtifactId, List<CVE>> cves;

	public DataBase() {
		this.cves = new HashMap<>();
	}

	public void add(CVE cve) {
		cves.computeIfAbsent(cve.getId(), id -> new LinkedList<>()).add(cve);
	}

	public void add(Collection<CVE> cves) {
		cves.forEach(this::add);
	}
	
	public List<Alert> apply(Collection<Dependency> dependencies) {
		return dependencies.stream().map(this::getAlert).filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());
	}

	private Optional<Alert> getAlert(Dependency dependency) {
		final List<CVE> onThisArtifact = cves.get(dependency.getId());
		if (onThisArtifact==null) {
			return Optional.empty();
		}
		List<CVE> result = onThisArtifact.stream().filter(cve -> cve.concerns(dependency)).collect(Collectors.toList());
		return result.isEmpty() ? Optional.empty() : Optional.of(new Alert(dependency, result));
	}
}
