package com.fathzer.cvereporter.utils;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UncheckedIOException;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.function.Function;

import lombok.AllArgsConstructor;
import lombok.Getter;

public class TinyRestClient {

	/** An exception that indicates a problem as occurred while requesting an URL.
	 */
	@AllArgsConstructor
	public static class FailureException extends IOException {
		private static final long serialVersionUID = 1L;
		@Getter
		private final int responseCode;
		private final byte[] bytes;
		@Override
		public String getMessage() {
			return getResponseCode() + (bytes.length==0 ? "" : "-" + new String(bytes, StandardCharsets.UTF_8));
		}
		
		public InputStream getErrorStream() {
			return new ByteArrayInputStream(bytes);
		}
	}

	/** Performs a GET request on an URL.
	 * @param <T> The type of the result of the web service call.
	 * @param proxy The The proxy to use to connect to the service.
	 * @param url The web service URL. It should contains all the required query parameters.
	 * @param success A function that will convert the web service response stream to a <b>T</b> instance (Typically based on a jackson objet mapper call to readValue).
	 * @return A T instance
	 * @throws FailureException if the server did not return a 200 http code.
	 * @throws IOException If something went wrong (server is unreachable, etc ...).
	 */
	public <T> T request(Proxy proxy, URL url, Function<InputStream, T> success) throws IOException {
        final HttpURLConnection connection = (HttpURLConnection) url.openConnection(proxy);
        try {
        	connection.setRequestProperty("Accept","*/*");
        	final int responseCode = connection.getResponseCode();
			if (responseCode==HttpURLConnection.HTTP_OK) {
		        return success.apply(getResponseStream(connection));
			} else {
				try (InputStream in = connection.getErrorStream()) {
					// We should copy the stream because the finally clause will close the connection before the exception add a chance to being caught
					throw new FailureException(responseCode, in==null ? new byte[0] : readAllBytes(in));
				}
			}
		} finally {
        	connection.disconnect();
        }
	}
	
	private static InputStream getResponseStream(HttpURLConnection connection) {
		try {
			return connection.getInputStream();
		} catch (IOException e) {
			throw new UncheckedIOException(e);
		}
	}
	
	private static byte[] readAllBytes(InputStream in) throws IOException {
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		byte[] buffer = new byte[1024];
		while (true) {
		    int r = in.read(buffer);
		    if (r == -1) break;
		    out.write(buffer, 0, r);
		}
		return out.toByteArray();
	}
}
