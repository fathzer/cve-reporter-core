package com.fathzer.cvereporter;

import java.io.IOException;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Function;
import java.util.stream.Collectors;

import com.fathzer.cvereporter.builder.BuildEngine;
import com.fathzer.cvereporter.builder.BuildStatus;
import com.fathzer.cvereporter.common.Dependency;
import com.fathzer.cvereporter.repository.CodeRepository;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@AllArgsConstructor()
public class CVEReporter {
	private CodeRepository codeRepo;
	private BuildEngine buildEngine;
	private Function<Collection<Dependency>, List<Alert>> cveDB;
	
	public List<ProjectCVEReport> getReports() throws IOException {
		log.info("Getting list of projects from code repository");
		final List<Project> projects = codeRepo.getProjects();
		log.info("Found {} projects", projects.size());

		final Timer timer = new Timer(true);
		final AtomicInteger count = new AtomicInteger();  
		timer.schedule(new TimerTask() {
			@Override
			public void run() {
				log.info("{} projects are processed", count);
			}
		}, 10000, 10000);
		final List<ProjectCVEReport> result = projects.stream().map(project -> {
			final ProjectCVEReport report = getReport(project);
			count.incrementAndGet();
			return report;
		}).collect(Collectors.toList());
		log.info("Done");
		return result;
	}

	protected ProjectCVEReport getReport(Project project) {
		try {
			final DependencySet dependencies = buildEngine.getDependencies(project);
			final BuildStatus status = dependencies.getStatus();
			final List<Alert> alerts = BuildStatus.OK.equals(status) ? cveDB.apply(dependencies.getDependencies()) : Collections.emptyList();
			return new ProjectCVEReport(project, status, alerts);
		} catch (Exception e) {
			log.error("An error occured while processing "+project.getPath(),e);
			return new ProjectCVEReport(project, e);
		}
	}
}
