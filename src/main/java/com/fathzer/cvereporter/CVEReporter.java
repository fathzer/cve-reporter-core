package com.fathzer.cvereporter;

import java.io.IOException;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Function;

import com.fathzer.cvereporter.Dependencies.Dependency;
import com.fathzer.cvereporter.Dependencies.Status;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@AllArgsConstructor(access = AccessLevel.PROTECTED)
public abstract class CVEReporter {
	private CodeRepository codeRepo;
	private BuildEngine buildEngine;
	private Function<Collection<Dependency>, List<Alert>> cveDB;
	
	public void run(List<String> groups) throws IOException {
		log.info("Getting list of projects from code repository");
		final List<Project> projects = codeRepo.getProjects(true, groups);
		log.info("Found {} projects", projects.size());

		final Timer timer = new Timer(true);
		final AtomicInteger count = new AtomicInteger();  
		timer.schedule(new TimerTask() {
			@Override
			public void run() {
				log.info("{} projects are processed", count);
			}
		}, 10000, 10000);
		for (Project project : projects) {
			try {
				doProject(project);
				count.incrementAndGet();
			} catch (Exception e) {
				log.error("An error occured while processing "+project.getPath(),e);
			}
		}
		log.info("Done");
	}

	private void doProject(Project project) throws IOException {
		final Dependencies dependencies = buildEngine.getDependencies(project);
		final Status status = dependencies.getSearchStatus();
		if (!Status.OK.equals(status)) {
			report(project, status, Collections.emptyList());
		} else {
			final List<Alert> alerts = cveDB.apply(dependencies.getDependencies());
			if (alerts.isEmpty()) {
				report(project, status, Collections.emptyList());
			} else {
				report(project, Status.ALERT, alerts);
			}
		}
	}
	
	protected abstract void report(Project project, Status status, List<Alert> alerts) throws IOException;
}
