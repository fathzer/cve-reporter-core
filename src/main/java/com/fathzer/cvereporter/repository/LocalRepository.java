package com.fathzer.cvereporter.repository;

import java.io.IOException;
import java.io.UncheckedIOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.fathzer.cvereporter.common.Project;

/** A local project repository.
 */
public class LocalRepository implements CodeRepository {
	private final Path root;

	/** Constructor
	 * @param root The root of the repository. It should be a directory and directly contains the directories of the projects.
	 * @throws IllegalArgumentException if root is not a directory
	 */
	public LocalRepository(Path root) {
		if (!Files.isDirectory(root)) {
			throw new IllegalArgumentException(root+" is not a directory");
		}
		this.root = root;
	}

	/** Gets the projects.
	 * Hidden directories and the one starting with a point are ignored.
	 */
	@Override
	public List<Project> getProjects() throws IOException {
		final AtomicInteger id = new AtomicInteger();
		try (Stream<Path> paths = Files.find(root, 1, (p, a) -> a.isDirectory() && !(root.equals(p) || isHidden(p) || p.getFileName().toString().startsWith(".")))) {
			return paths.map(Path::getFileName).map(Object::toString).map(n -> new Project(Integer.toString(id.getAndIncrement()),n)).collect(Collectors.toList());
		}
	}

	private boolean isHidden(Path path) {
		try {
			return Files.isHidden(path);
		} catch (IOException e) {
			throw new UncheckedIOException(e);
		}
	}

	@Override
	public String getFile(Project project, String path) throws IOException {
		return new String(Files.readAllBytes(root.resolve(project.getPath()).resolve(path)));
	}
}
