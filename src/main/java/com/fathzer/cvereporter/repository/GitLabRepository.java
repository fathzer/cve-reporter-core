package com.fathzer.cvereporter.repository;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.UncheckedIOException;
import java.net.Proxy;
import java.net.URI;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fathzer.cvereporter.common.Project;
import com.fathzer.cvereporter.utils.TinyRestClient;
import com.fathzer.cvereporter.utils.TinyRestClient.FailureException;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class GitLabRepository implements CodeRepository {
	private static final ObjectMapper MAPPER = new ObjectMapper();
	
	@JsonIgnoreProperties(ignoreUnknown = true)
	private static final class GitlabProject {
		private int id;
		private String path;

		@JsonCreator
		public GitlabProject(@JsonProperty("id") int id, @JsonProperty("path_with_namespace") String path) {
			this.id = id;
			this.path = path;
		}

		private Project toProject() {
			return new Project(Integer.toString(id), path);
		}
	}

	private final String rootURI;
	private final String token;
	private Proxy proxy;
	private boolean onlyOwner;
	
	public GitLabRepository(String rootURI, String token) {
		this.rootURI = rootURI;
		this.token = token;
		this.proxy = Proxy.NO_PROXY;
		this.onlyOwner = true;
	}
	
	public String getRootURI() {
		return rootURI;
	}

	public String getToken() {
		return token;
	}

	public void setProxy(Proxy proxy) {
		this.proxy = proxy;
	}

	public void setOnlyOwner(boolean onlyOwner) {
		this.onlyOwner = onlyOwner;
	}

	@Override
	public List<Project> getProjects() throws IOException {
		int page = 0;
		List<GitlabProject> pageProjects;
		final List<Project> projects = new ArrayList<>();
		do {
			page++;
			pageProjects = getProjects(page);
			pageProjects.stream().map(GitlabProject::toProject).forEach(projects::add);
			log.trace("found "+projects.size());
		} while (!pageProjects.isEmpty());
		return projects;
	}

	private List<GitlabProject> getProjects(int page) throws IOException {
		final String url = String.format("%s/api/v4/projects?private_token=%s&owned=%b&per_page=100&page=%d",rootURI,token,onlyOwner,page);
		final GitlabProject[] projects = new TinyRestClient().request(proxy, URI.create(url).toURL(), x->readValue(x,GitlabProject[].class));
		return Arrays.asList(projects);
	}
	
	private <T> T readValue(InputStream s, Class<T> aClass) {
		try (InputStream in = s) {
			return MAPPER.readValue(in, aClass);
		} catch (IOException e) {
			throw new UncheckedIOException(e);
		}
	}
	
	@Override
	public String getFile(Project project, String path) throws IOException {
		final String url = String.format("%s/api/v4/projects/%s/repository/files/%s?private_token=%s&ref=master",rootURI,project.getId(),URLEncoder.encode(path, StandardCharsets.UTF_8.name()),token);
		try {
			final String base64Pom = (String) new TinyRestClient().request(proxy, URI.create(url).toURL(), x->readValue(x,Map.class)).get("content");
			return new String(Base64.getDecoder().decode(base64Pom));
		} catch (FailureException e) {
			if (e.getResponseCode()==404) {
				throw new FileNotFoundException(project.getPath()+"/"+path);
			} else {
				throw new IOException(e);
			}
		}
	}
}
