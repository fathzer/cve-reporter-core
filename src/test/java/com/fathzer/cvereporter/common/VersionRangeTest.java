package com.fathzer.cvereporter.common;

import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;

import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.Getter;

class VersionRangeTest {

	@Test
	void test() {
		VersionRange r = new VersionRange("[3.2-alpha0,3.2.1.RELEASE],[3.1-alpha0,3.1.5.RELEASE]");
		assertTrue (r.contains(new Version("3.2.0")));
		assertTrue (r.contains(new Version("3.1.3")));
		final VersionRange other = new VersionRange("[3.1-alpha0,3.1.5.RELEASE],[3.2-alpha0,3.2.1.RELEASE]");
		assertEquals(other.hashCode(),r.hashCode());
		assertEquals(other,r);
		
		assertThrows(IllegalArgumentException.class, () -> new VersionRange("[1."));
		assertThrows(IllegalArgumentException.class, () -> new VersionRange("[1.,1.9],[2."));
	}
	
	@Test
	void testBug20220303() {
		// The empty version before 4.3.20 resulted in a NullPointerException in the constructor
		VersionRange r = new VersionRange("[5.1,5.1.1),[5.0,5.0.10),(,4.3.20)");
		assertTrue(r.contains(new Version("1.0.0")));
		assertFalse(r.contains(new Version("4.3.20")));
		assertTrue(r.contains(new Version("5.0")));
		assertFalse(r.contains(new Version("5.0.10")));
		assertTrue(r.contains(new Version("5.1")));
		assertFalse(r.contains(new Version("5.1.1")));
	}

	@Test
	void testSerialization() throws IOException {
		final ObjectMapper mapper = new ObjectMapper();
		final VersionRange r = new VersionRange("[3.2-alpha0,3.2.1.RELEASE],[3.1-alpha0,3.1.5.RELEASE]");
		final String json = mapper.writeValueAsString(r);
		VersionRange v = mapper.readValue(json, VersionRange.class);
		assertEquals("[3.1-alpha0,3.1.5.RELEASE],[3.2-alpha0,3.2.1.RELEASE]",v.toString());
		
		final VersionRange b = new VersionRange("[3.1-alpha0,3.1.5.RELEASE],[3.2-alpha0,3.2.1.RELEASE]") {
			@Getter
			private String other = "other";
		};
		final String json2 = mapper.writeValueAsString(b);
		assertNotEquals(json, json2);
		assertEquals(r, mapper.readValue(json2, VersionRange.class));
	}
}
