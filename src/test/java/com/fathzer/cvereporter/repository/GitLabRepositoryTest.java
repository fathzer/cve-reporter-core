package com.fathzer.cvereporter.repository;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.mockserver.integration.ClientAndServer;
import org.mockserver.model.HttpRequest;

import com.fathzer.cvereporter.common.Project;

import static org.mockserver.model.HttpRequest.request;
import static org.mockserver.model.HttpResponse.response;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;;

class GitLabRepositoryTest {
	private static ClientAndServer mockServer;
	
	@BeforeAll
	static void startServer() {
		mockServer = ClientAndServer.startClientAndServer();
		final HttpRequest projectRequest = request("/api/v4/projects").
				withQueryStringParameter("private_token", "token").
				withQueryStringParameter("owned", "false").
				withQueryStringParameter("per_page", "100");
		final HttpRequest p1Request = projectRequest.clone().withQueryStringParameter("page", "1");
		mockServer.when(p1Request).respond(response("[{\"id\":1,\"path_with_namespace\":\"g1/p1\",\"extra_attr\":28},{\"id\":3,\"path_with_namespace\":\"g2/p3\"},{\"id\":2,\"path_with_namespace\":\"g1/p2\"}]"));
		final HttpRequest p2Request = projectRequest.clone().withQueryStringParameter("page", "2");
		mockServer.when(p2Request).respond(response("[]"));
		final HttpRequest fileRequest = request("/api/v4/projects/x/repository/files/a%2Ftoto.txt").
				withQueryStringParameter("private_token", "token").
				withQueryStringParameter("ref", "master");
		mockServer.when(fileRequest).respond(response("{\"extra_attr\":28,\"content\":\"SGVsbG8=\"}"));
	}
	
	@AfterAll
	static void stopServer() {
		mockServer.stop();
	}

	@Test
	void test() throws IOException {
		final GitLabRepository repo = new GitLabRepository("http://127.0.0.1:"+mockServer.getPort(),"token");
		repo.setOnlyOwner(false);
		final List<Project> projects = repo.getProjects();
		assertEquals(3, projects.size());
		
		final Project p = new Project("x","toto");
		final String content = repo.getFile(p, "a/toto.txt");
		assertEquals("Hello", content);
		
		assertThrows(FileNotFoundException.class, () -> repo.getFile(p, "b/toto.txt"));
	}
}
