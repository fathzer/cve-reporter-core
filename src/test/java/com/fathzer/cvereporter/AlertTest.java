package com.fathzer.cvereporter;

import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fathzer.cvereporter.common.Artifact;
import com.fathzer.cvereporter.common.Dependency;
import com.fathzer.cvereporter.common.Version;
import com.fathzer.cvereporter.common.VersionRange;
import com.fathzer.cvereporter.cve.CVE;

class AlertTest {
	private static final Artifact ab = new Artifact("a","b");
	private static final VersionRange range = new VersionRange("(1.0,]");
	private static final CVE cve1 = new CVE("1", ab, range, "cve1");
	private static final CVE cve2 = new CVE("2", ab, range, "cve2");
	private static final CVE cve3 = new CVE("3", ab, range, "cve3");
	private static final Dependency dependency = new Dependency(ab,new Version("0.9.0"));

	@BeforeAll
	static void init() {
		cve2.setScore(4.0);
		cve3.setScore(6.0);
		cve3.setReferences(Arrays.asList("toto"));
	}

	@Test
	void test() {
		Alert alert = new Alert(dependency, Arrays.asList(cve1));
		assertFalse(alert.getMaxScore().isPresent());
		assertTrue(alert.hasUnknownScore());

		alert = new Alert(dependency, Arrays.asList(cve1, cve2, cve3));
		assertTrue(alert.getMaxScore().isPresent());
		assertEquals(6.0, alert.getMaxScore().getAsDouble(), 0.1);
		assertTrue(alert.hasUnknownScore());
		
		alert = new Alert(dependency, Arrays.asList(cve2, cve3));
		assertTrue(alert.getMaxScore().isPresent());
		assertEquals(6.0, alert.getMaxScore().getAsDouble(), 0.1);
		assertFalse(alert.hasUnknownScore());
		
		List<Alert> alerts = Arrays.asList(new Alert(dependency, Arrays.asList(cve2, cve3)), new Alert(dependency,Arrays.asList(cve1)));
		assertTrue(Alert.getMaxScore(alerts).isPresent());
		assertEquals(6.0, Alert.getMaxScore(alerts).getAsDouble(), 0.1);
		assertTrue(Alert.hasUnknownScore(alerts));

		alerts = Arrays.asList(new Alert(dependency, Arrays.asList(cve2)), new Alert(dependency,Arrays.asList(cve3)));
		assertTrue(Alert.getMaxScore(alerts).isPresent());
		assertEquals(6.0, Alert.getMaxScore(alerts).getAsDouble(), 0.1);
		assertFalse(Alert.hasUnknownScore(alerts));
		
		final List<CVE> emptyList = Collections.emptyList();
		assertThrows(NullPointerException.class, () -> new Alert(null, emptyList));
		assertThrows(NullPointerException.class, () -> new Alert(null, null));
		assertThrows(NullPointerException.class, () -> new Alert(dependency, null));
		
		assertEquals("a:b:0.9.0: [2 (4.0)]",alerts.get(0).toString());
	}

	@Test
	void testSerialization() throws IOException {
		final Alert alert = new Alert(dependency, Arrays.asList(cve3));
		final ObjectMapper mapper = new ObjectMapper();
		final String json = mapper.writeValueAsString(alert);
		Alert v = mapper.readValue(json, Alert.class);
		assertEquals(dependency,v.getDependency());
		assertEquals(6.0,v.getCauses().get(0).getScore());
		assertEquals(Arrays.asList("toto"),v.getCauses().get(0).getReferences());
	}
}
