package com.fathzer.cvereporter;

import static org.junit.jupiter.api.Assertions.*;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fathzer.cvereporter.builder.BuildEngine;
import com.fathzer.cvereporter.builder.BuildStatus;
import com.fathzer.cvereporter.builder.CompoundEngine;
import com.fathzer.cvereporter.builder.DependencySet;
import com.fathzer.cvereporter.builder.MavenEngine;
import com.fathzer.cvereporter.common.Project;
import com.fathzer.cvereporter.cve.CVE;
import com.fathzer.cvereporter.cve.DataBase;
import com.fathzer.cvereporter.cve.GitLabAdvisoryDatabase;
import com.fathzer.cvereporter.repository.CodeRepository;
import com.fathzer.cvereporter.repository.LocalRepository;

import lombok.Getter;

class CVEReporterTest {
	private static final ObjectMapper MAPPER = new ObjectMapper();
	
	private static class FakeEngine implements BuildEngine {
		@Override
		public DependencySet getDependencies(Project project) throws IOException {
			return new DependencySet("p1".equals(project.getPath()) ? BuildStatus.NOT_THIS_BUILDER : BuildStatus.BUILD_ERROR, null);
		}
	}

	@Test
	void test() throws IOException {
		final DataBase db = new GitLabAdvisoryDatabase(new File("src/test/resources/advisories.zip"));
		final CodeRepository repo = new LocalRepository(Paths.get("src/test/resources/projects"));
		final CompoundEngine engine = new CompoundEngine(new FakeEngine());
		final BuildEngine fakeMavenEngine = new MavenEngine(repo) {
			@Override
			protected int getDependenciesFile(File projectDir) throws IOException {
				Files.copy(Paths.get("src/test/resources/projects/p1",DEPENDENCY_FILE), projectDir.toPath().resolve(DEPENDENCY_FILE), StandardCopyOption.REPLACE_EXISTING);
				Files.copy(Paths.get("src/test/resources/projects/p1/a",DEPENDENCY_FILE), projectDir.toPath().resolve("a").resolve(DEPENDENCY_FILE), StandardCopyOption.REPLACE_EXISTING);
				Files.copy(Paths.get("src/test/resources/projects/p1/b",DEPENDENCY_FILE), projectDir.toPath().resolve("b").resolve(DEPENDENCY_FILE), StandardCopyOption.REPLACE_EXISTING);
				return 0;
			}
		};
		engine.add(fakeMavenEngine);
		final CVEReporter cveReporter = new CVEReporter(repo, engine, db);
		cveReporter.setQuiet(true);
		cveReporter.setProjectFilter(p->p.getPath().startsWith("p") || p.getPath().startsWith(".t"));
		List<ProjectCVEReport> reports = cveReporter.getReports();
		assertEquals(2, reports.size());
		assertEquals(BuildStatus.BUILD_ERROR,getReport(reports,"p2").getStatus());
		final String json = MAPPER.writeValueAsString(getReport(reports,"p1"));
		ProjectCVEReport p1 = MAPPER.readValue(json, ProjectCVEReport.class);
		
		assertEquals(BuildStatus.OK,p1.getStatus());
		assertEquals(3,p1.getAlerts().size());
		assertEquals(1, getAlert(p1.getAlerts(),"io.springfox:springfox-swagger-ui").getCauses().size());
		final Alert alert = getAlert(p1.getAlerts(),"org.apache.logging.log4j:log4j-core");
		assertFalse(alert.getDependency().isTestCode());
		assertEquals(2, alert.getCauses().size());
		assertEquals(new HashSet<>(Arrays.asList("CVE-2021-44228","CVE-2020-9488")),alert.getCauses().stream().map(CVE::getIdentifier).collect(Collectors.toSet()));
		assertTrue(getAlert(p1.getAlerts(),"junit:junit").getDependency().isTestCode());
		
		cveReporter.setIgnoreTestDependencies(true);
		cveReporter.setProjectFilter(p->p.getPath().startsWith("p1"));
		reports = cveReporter.getReports();
		assertEquals(1, reports.size());
		assertEquals(2, reports.get(0).getAlerts().size());
		assertEquals(Arrays.asList("CVE-2021-44228","CVE-2020-9488","CVE-2019-17495"), reports.get(0).getAlerts().stream().flatMap(a -> a.getCauses().stream()).map(CVE::getIdentifier).collect(Collectors.toList()));
		
		final ProjectCVEReport b = new ProjectCVEReport(new Project("a","b"), BuildStatus.OK, null) {
			@Getter
			private String other = "other";
		};
		final String json2 = MAPPER.writeValueAsString(b);
		assertNotEquals(json, json2);
		assertEquals(b.getStatus(), MAPPER.readValue(json2, ProjectCVEReport.class).getStatus());
	}
	
	private Alert getAlert(Collection<Alert> alerts, String artifact) {
		final Optional<Alert> first = alerts.stream().filter(a -> artifact.equals(a.getDependency().getArtifact().toString())).findFirst();
		return first.orElse(null);
	}
	
	private ProjectCVEReport getReport(List<ProjectCVEReport> reports, String path) {
		return reports.stream().filter(r -> path.equals(r.getProject().getPath())).findFirst().get();
	}
}
