package com.fathzer.cvereporter;

import static org.junit.jupiter.api.Assertions.*;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fathzer.cvereporter.builder.BuildEngine;
import com.fathzer.cvereporter.builder.BuildStatus;
import com.fathzer.cvereporter.builder.CompoundEngine;
import com.fathzer.cvereporter.builder.DependencySet;
import com.fathzer.cvereporter.builder.MavenEngine;
import com.fathzer.cvereporter.common.Project;
import com.fathzer.cvereporter.cve.DataBase;
import com.fathzer.cvereporter.cve.GitLabAdvisoryDatabase;
import com.fathzer.cvereporter.repository.CodeRepository;
import com.fathzer.cvereporter.repository.LocalRepository;

class CVEReporterTest {
	private static class FakeEngine implements BuildEngine {
		@Override
		public DependencySet getDependencies(Project project) throws IOException {
			return new DependencySet("p1".equals(project.getPath()) ? BuildStatus.NOT_THIS_BUILDER : BuildStatus.BUILD_ERROR, null);
		}
	}

	@Test
	void test() throws IOException {
		final DataBase db = new GitLabAdvisoryDatabase(new File("src/test/resources/advisories.zip"));
		final CodeRepository repo = new LocalRepository(Paths.get("src/test/resources/projects"));
		final CompoundEngine engine = new CompoundEngine(new FakeEngine());
		final BuildEngine fakeMavenEngine = new MavenEngine(repo) {
			@Override
			protected int getDependenciesFile(File projectDir) throws IOException {
				Files.copy(Paths.get("src/test/resources/projects/p1",DEPENDENCY_FILE), projectDir.toPath().resolve(DEPENDENCY_FILE));
				return 0;
			}
		};
		engine.add(fakeMavenEngine);
		final CVEReporter cveReporter = new CVEReporter(repo, engine, db);
		final List<ProjectCVEReport> reports = cveReporter.getReports();
		assertEquals(BuildStatus.BUILD_ERROR,getReport(reports,"p2").getStatus());
		final ProjectCVEReport p1 = fromSerialization(getReport(reports,"p1"));
		
		assertEquals(BuildStatus.OK,p1.getStatus());
		assertEquals(1,p1.getAlerts().size());
		assertEquals(1,p1.getAlerts().get(0).getCauses().size());
		assertEquals("CVE-2021-44228",p1.getAlerts().get(0).getCauses().get(0).getIdentifier());
	}
	
	private ProjectCVEReport getReport(List<ProjectCVEReport> reports, String path) {
		return reports.stream().filter(r -> path.equals(r.getProject().getPath())).findFirst().get();
	}
	
	private ProjectCVEReport fromSerialization(ProjectCVEReport value) throws IOException {
		final ObjectMapper mapper = new ObjectMapper();
		final String json = mapper.writeValueAsString(value);
		return mapper.readValue(json, ProjectCVEReport.class);
	}
}
